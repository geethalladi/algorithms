#+TITLE: Algorithm Design Manual Notes
#+TAGS:
#+DATE: 2020-11-30
#+STARTUP: hideblocks
#+TODO: TODO(t) PROGRESS(p) WAITING(w) | DONE(d) | CANCELLED(c)
#+OPTIONS: toc:nil
#+FILETAGS: :algo:design_manual:skiena:impl_backlog:
* Algorithm Design Manual Notes
# all the lectures
** General
*** DONE binary search
*** DONE Movie Star Scheduling Program
** Basics
# List of items to implement (preferably: after completing the lecture video series)
*** Dictionaries
# All the six operations (insert, delete, min, max, pred, succ)
**** Dictionary Implementation
**** Singly Linked unsorted
**** Singly Linked sorted
**** Doubly Linked unsorted
**** Doubly linked sorted
**** Binary Search Tree
**** Hash Tables
- Hash chaining, can also be an exercise (read the Java implementation)
*** Sorting
**** Selection Sort
**** Sort numbers using a dictionary
- Find min / max with a dictionary and successor
**** TODO Merge Sort
**** Quick Sort
**** Bucket Sort
**** Count Sort
**** Finding the median + k-th largest / smallest element
- Without sorting
** Trees
*** Trees
**** Binary Tree
**** Binary Search Tree
- All the six operations
*** Balanced Binary Search Trees
# All the six operations (insert, delete, min, max, pred, succ)
**** AVL Tree
**** Red Black Tree
**** Splay Tree
**** B-tree
*** Heap
**** Fibonacci Heaps
**** Implementation
- Insertion, Deletion
- Faster heap in O(n) time by Robert Floyd
**** Heap Sort
- Selection sort using heap data structure
**** Priority Queue using heap sort
- Insert, Delete, find min / max
** Graphs
*** Unweighted Graphs
**** Graph Representations
***** Adjacency Matrix
***** TODO Adjacency List
***** Incidence Matrix
**** Breadth First Search
***** Finding shortest path
***** Connected Components
***** TODO Two coloring (bipartite graph)
**** Depth First Search
***** TODO Finding cycle in a graph
***** Articulation Vertices
***** Topological Sorting
***** Strongly Connected Components
*** Weighted Graphs
**** Spanning Tree
***** Spanning Tree using BFS / DFS
- Using the tree of discovery
***** Prim
***** Kruskal
***** Shortest path spanning trees
***** Minimum bottleneck Spanning Tree
**** Shortest Path
***** Single Source Shortest Path
****** Dijkstra's Algorithm
***** All Pair Shortest Path
****** Floyd Warshall Algorithm
***** With negative edge weights
***** Shortest Path using k edges
***** Shortest Path in a DAG
- Topological Sorting and then DP
**** Squaring a Graph
**** Network Flow
**** DAG
- Eval an arithmetic expression given as a DAG in O(n)
** Design Techniques
*** Backtracking
**** N Queens
**** Sudoku solving
**** Construct 2^n subsets of n elements
**** TODO Construct all permutations
**** Bandwidth Problem
**** Derangement Problem
**** 8 Pieces cover a chess board
**** Given Prime Factors, find the complete list of divisors
*** Dynamic Programming
**** TODO Fibonacci Numbers
**** Binomial Coefficients
**** X Y Z are strings, Z formed by inter-leaving X and Y
**** Edit distance
***** insert, delete, substitute
***** With swap
**** Breaking Strings into 'n' pieces (Order affects the cost)
**** Maximum Monotone sub-sequence
**** Dropping Egg
**** High Density Bar codes
**** Dividing the work into 'k' workers
**** TODO Given an array of numbers, find the maximum sum in a contiguous array :L26:
**** Given a string and multiplication table, parenthesize the expression :L26:
*** Greedy Algorithm
**** Vertex Cover in a tree
*** Divide and Conquer
**** Fast Fourier Transform
**** Strassen Multiplication
** Randomized Algorithms
** Misc
*** Convex Hull Algorithm
** NP Completeness
*** SAT Problem
- 2 SAT
- 3 SAT
*** Traveling Salesman Problem
**** Euclidean Traveling Salesman Problem
*** Integer Partition
*** Vertex Cover
*** Sub-graph Isomorphism
*** Clique
*** Maximum Independent Set
*** Graph Contraction
*** Hamiltonian Path
*** Hamiltonian Cycle
*** Knapsack / Bin packing
** References
- Divide and conquer (Lecture 19.6, 1997)
- Recurrence relations (Lecture 19.7, 1997)
- Skip Lists
