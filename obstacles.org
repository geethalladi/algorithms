#+TODO: TODO(t) PROGRESS(p) WAITING(w) | CANCELLED(c) DONE(d)
* Obstacles
  # Obstacles are not negative. Understand that obstacles shows
  # (becomes) the way.
  #  "The mind adapts and converts to its own purposes the obstacle to
  #  our acting. The impediment to action advances action. What stands
  #  in the way becomes the way" - Marcus Aurelius
The following are the hurdles / obstacles faced while implementing algorithms in python
** For undirected graph, edge should be a single instance
- Complicates while setting the state of the edge
- As this needs to be done in both directions
- Better have a single container instance in both directions
** Vertex's parent should be vertex
- Currently it's a string
** Topological Sorting                                                :algo:
** Dijkstra's Shortest Path (Single Source)                           :algo:
** Strongly Connected Components                                      :algo:
** Domain Specific Language in hy
- Lisp dialect for python
** Warnsdroff algorithm
- for knight's tour
** Modules and their imports                                            :py:
*** Sibling Package
- As of now, using the full package path
- Find ways to use relative package paths
** DONE Edge coloring in Visualization
** DONE EdgeContainer state cannot be updated
- NamedTuples are immutable
- Changing it to dataclass to unblock
** DONE num_components member issue in GraphTraversalMixin
- Added a member in the inherited class
- Need to fix it later
** DONE Refactoring State for Edge
- State for use with both Vertex and Edge
** DONE Bug in viewing discover / finish timings
** DONE IGraph with num_components
** DONE Confusion between single source DFS and Forest DFS
** DONE Depth First Search                                            :algo:
** DONE Issues with spaces around `=`
- Auto formatter removed space around `=`
- Deleted the troublesome code and it worked
- Most likely because of an extra '(' somewhere
** DONE Vertex with discovery / finish time
** DONE Iterable IGraph
- IGraph with `__iter__`
** DONE Validating function for tour
- Eval string as tuple
- Check the validation conditions
** DONE Knight's Tour
** DONE Graph accept duplicate edges
- and politely ignore
** DONE Stop and View Graph
** DONE BFS with set_parent + distance
** DONE Breadth First Search                                          :algo:
** DONE Excluding `...` and others from coverage
** DONE Adding unit tests for sate + clear state
** DONE Clear state in Vertex + Graph
** DONE Adding Parent + Distance for each vertex
** DONE Vertex - Rewrite visited boolean to state
** DONE Word ladder Problem                                           :algo:
** DONE Vertex with visited property
** DONE Graph vertex with color
- Visualize the color of the vertex as well
** DONE Adjacency List Representation of Graph                        :algo:
** DONE Unit test coverage
** DONE Rewriting tests with Graph.build
** DONE Fix GraphBuilderMixin Instance create lint error
- Refer to https://github.com/python/typing/issues/58 for details
- Protocol super was never called
- Ended up creating a class-method inside Protocol
** DONE Moving build as a static function inside Graph
** DONE Creating a Graph builder
- Creating a builder class for ease of constructing Graph
- Edge instance with named tuple
- Updating tests to use Graph builder
** DONE Visualizing Graphs with Graphviz
- Building a graph visualizer
** DONE Abstract Base Class in Python                                   :py:
** DONE Mixin(s) in python                                              :py:
- Type / Lint errors in using Mixin
** DONE Reimplementing is_directed
- Found a bug in the existing implementation
- Wrote unit tests to uncover
- Updated the implementation (in terms of `is_undirected`)
- Test cases passed
** DONE Python Lint - Ignore flake configurations                     :lint:
- Difference between pylint and flake
- Adding separate configurations from them
- How to add inline configurations for them

** DONE Test Suite with setup and teardown methods
- Read and used them
** DONE Test Runner does not show log output
- When ran individually inside emacs
- Updated py.test to the latest version
- Wrote the configuration file in toml
- The Emacs runner reflects the configuration
** DONE Precondition and Post-condition checks
- Check pre-conditions in python functions
** DONE Updating emacs packages                                      :emacs:
** DONE Jedi.el + backend is not compatible                          :emacs:
- jedi package and jedi.el is not in sync
** DONE Auto completion does not work                                :emacs:
- Updated jedi and its corresponding emacs package
** DONE Assertion
- Adding assertions in python code
- Turning off assertions in Production
** DONE Attribute name should be snake case                           :lint:
- Update `pylintrc`
- Changed `attr-name-style` to be any
** DONE Upgrading Python inside virtual environment                   :venv:
- Deleted the existing venv
- Reinstalled all the packages
- Folder renaming does not work
- Created it fresh again
** DONE Resolving Collection is unsubscriptable
- Got a lint error
- Required Upgrading python
- Ended up re-creating everything (venv + packages + requirements.txt) from scratch
** DONE Emacs flycheck does not work at times                        :emacs:
- Flycheck does not show lint errors
- Activate pyvenv at start
- Switch to test file and it works
# - Activated pyvenv as part of emacs init (later, if required)
** DONE Linting                                                       :lint:
- Updating lint configuration for variable names
- Allowing simple variable names

** DONE Visualizing graphs in python
- Representing graphs in a Domain Specific Language
- Ability to visualize this representation

** DONE Notes for future usage
- Taking notes for future usage

** DONE Static types                                                    :py:
- Add support for static type checking with python 3

** DONE Emacs Integration                                            :emacs:
*** inferior mode
- Integration with ipython
- eval a file
- reloading file
*** workflow
- Deciding how to do REPL driven development with emacs and python
*** unit testing
- What package
- How to run a standalone file
- How to switch to the corresponding test file
- Create a snippet for test files

** DONE Disabling Lint errors                                         :lint:
- Flyspell check for linting errors
- How to disable them when required

** DONE Virtual Environment                                           :venv:
- Setting up a separate environment for this project
- Integrating with emacs / elpy

** DONE Package dependencies                                            :py:
- How to capture package dependencies with requirements.txt
- Adding newer packages on demand

** DONE Logging
- Ability to add logs
- Multiple log levels

** DONE Makefile
- Learning Makefile and using it as a runner
- Setting default target

** DONE Unit testing public functions in python                         :py:
- Decide the unit test library
- Ability to unit test the public functions
- Do a Test Driven Development
- Unit tests before writing the implementation

** DONE Directory Structure
- Decide how the source files and test files are going to be structured
** CANCELLED Vertex as a container type
- Using literal eval for the time being
** CANCELLED Emacs auto import                                       :emacs:
- Auto import causes more damage than it helps
- Ignored for now
